<!-- At the top of your script tag in pal.hbs -->
<script src="/js/character.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', async function() {
    // Mode switching elements
    const viewMode = document.getElementById('view-mode');
    const editMode = document.getElementById('edit-mode');
    const editButton = document.getElementById('edit-button');
    const cancelButton = document.getElementById('cancel-button');
    
    // Form elements
    const form = document.getElementById('character-form');
    const nameInput = document.getElementById('characterName');
    const hatOptions = document.querySelectorAll('.hat-option');
    const colorOptions = document.querySelectorAll('.color-option');
    
    // Current selections
    let currentSelections = {
      name: nameInput.value || 'Unnamed Pal',
      hat: '',
      color: 'default'
    };
    
    // Original values to restore on cancel
    let originalValues = { ...currentSelections };
    
    // Load saved character data when page loads
    await loadCharacterData();
    
    // Function to load character data from database
    async function loadCharacterData() {
      try {
        const data = await getCharacterCustomization();
        
        // Set initial values from database
        if (data) {
          currentSelections = {
            name: data.character_name || 'Unnamed Pal',
            hat: data.hat_choice || '',
            color: data.color_choice || 'default'
          };
          
          // Also set original values
          originalValues = { ...currentSelections };
          
          // Update form values
          nameInput.value = currentSelections.name;
          
          // Select the appropriate hat button
          hatOptions.forEach(btn => {
            btn.classList.remove('border-blue-500', 'bg-blue-50');
            if (btn.getAttribute('data-hat') === currentSelections.hat) {
              btn.classList.add('border-blue-500', 'bg-blue-50');
            }
          });
          
          // Select the appropriate color button
          colorOptions.forEach(btn => {
            btn.classList.remove('border-gray-800');
            if (btn.getAttribute('data-color') === currentSelections.color) {
              btn.classList.add('border-gray-800');
            }
          });
          
          // Update display
          updateCharacterName();
          updateCharacterImage();
        }
      } catch (error) {
        console.error('Error loading character data:', error);
      }
    }
    
    // Initialize selected hat and color if any
    const initialHat = document.querySelector('.hat-option.border-blue-500');
    if (initialHat) {
      currentSelections.hat = initialHat.getAttribute('data-hat');
    }
    
    const initialColor = document.querySelector('.color-option.border-gray-800');
    if (initialColor) {
      currentSelections.color = initialColor.getAttribute('data-color');
    }
    
    // Update character image based on selections
    function updateCharacterImage() {
      const hat = currentSelections.hat || 'none';
      const color = currentSelections.color || 'default';
      
      // Create base image path
      let imagePath;
      
      if (hat === 'none' || hat === '') {
        // No hat selected
        if (color === 'default') {
          // No color selected either, use base monster
          imagePath = '../../pictures/basemonster.jpeg';
        } else {
          // Color selected but no hat
          imagePath = `../../pictures/basemonster_${color}.jpeg`;
        }
      } else {
        // Hat selected
        if (color === 'default') {
          // Hat selected but no color, use default color with hat
          imagePath = `../../pictures/monster_default_${hat}.jpeg`;
        } else {
          // Both hat and color selected
          imagePath = `../../pictures/monster_${color}_${hat}.jpeg`;
        }
      }
      
      // Update the image src in the DOM
      document.querySelectorAll('.character-card img').forEach(img => {
        img.src = imagePath;
        img.alt = `${currentSelections.name} with ${hat !== 'none' ? hat + ' hat' : 'no hat'}`;
      });
    }
    
    // Update character name
    function updateCharacterName() {
      const name = currentSelections.name;
      document.querySelectorAll('.character-card h2').forEach(el => {
        el.textContent = name;
      });
    }
    
    // Toggle between view and edit modes
    editButton.addEventListener('click', function() {
      // Save current values before editing
      originalValues = { ...currentSelections };
      
      // Show edit mode
      viewMode.classList.add('hidden');
      editMode.classList.remove('hidden');
    });
    
    // Handle cancel button click
    cancelButton.addEventListener('click', function() {
      // Restore original values
      currentSelections = { ...originalValues };
      
      // Update UI to reflect original values
      nameInput.value = originalValues.name;
      
      // Reset hat selection
      hatOptions.forEach(btn => {
        btn.classList.remove('border-blue-500', 'bg-blue-50');
        if (btn.getAttribute('data-hat') === originalValues.hat) {
          btn.classList.add('border-blue-500', 'bg-blue-50');
        }
      });
      
      // Reset color selection
      colorOptions.forEach(btn => {
        btn.classList.remove('border-gray-800');
        if (btn.getAttribute('data-color') === originalValues.color) {
          btn.classList.add('border-gray-800');
        }
      });
      
      // Update the character image and name
      updateCharacterName();
      updateCharacterImage();
      
      // Switch back to view mode
      editMode.classList.add('hidden');
      viewMode.classList.remove('hidden');
    });
    
    // Update name in real-time
    nameInput.addEventListener('input', function() {
      currentSelections.name = this.value || 'Unnamed Pal';
      updateCharacterName();
    });
    
    // Handle hat selection
    hatOptions.forEach(button => {
      button.addEventListener('click', function() {
        hatOptions.forEach(btn => btn.classList.remove('border-blue-500', 'bg-blue-50'));
        this.classList.add('border-blue-500', 'bg-blue-50');
        
        currentSelections.hat = this.getAttribute('data-hat');
        updateCharacterImage();
      });
    });
    
    // Handle color selection
    colorOptions.forEach(button => {
      button.addEventListener('click', function() {
        colorOptions.forEach(btn => btn.classList.remove('border-gray-800'));
        this.classList.add('border-gray-800');
        
        currentSelections.color = this.getAttribute('data-color');
        updateCharacterImage();
      });
    });
    
    // Handle form submission
    form.addEventListener('submit', async function(e) {
      e.preventDefault();
      
      // Save the current values as the original values for next edit session
      originalValues = { ...currentSelections };
      
      // Create status message element
      const statusElement = document.createElement('div');
      statusElement.className = 'mt-4 p-2 rounded text-center';
      form.appendChild(statusElement);
      
      // Send the data to the server
      try {
        await saveCharacterCustomization({
          character_name: currentSelections.name,
          hat_choice: currentSelections.hat,
          color_choice: currentSelections.color
        });
        
        // Show success message
        statusElement.className = 'mt-4 p-2 bg-green-100 text-green-800 rounded text-center';
        statusElement.textContent = 'Character saved successfully!';
        
        // Remove success message after 3 seconds
        setTimeout(() => {
          statusElement.remove();
        }, 3000);
        
        // Switch back to view mode after saving
        editMode.classList.add('hidden');
        viewMode.classList.remove('hidden');
      } catch (error) {
        console.error('Error saving character:', error);
        
        // Show error message
        statusElement.className = 'mt-4 p-2 bg-red-100 text-red-800 rounded text-center';
        statusElement.textContent = 'Failed to save character. Please try again.';
        
        // Remove error message after 3 seconds
        setTimeout(() => {
          statusElement.remove();
        }, 3000);
      }
    });
  });
</script>